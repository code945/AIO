<?php
namespace frontend\controllers;

use common\helper\CommonHelper;
use common\helper\HttpHelper;
use common\models\Post;
use PHPQRCode\QRcode;
use Yii;
use yii\base\Exception;
use yii\data\ActiveDataProvider;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use yii\web\Response;
use EasyWeChat\Foundation\Application;
/**
 * Site controller
 */
class WechatController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'index' => ['POST','GET'],
                ],
            ],
        ];
    }


    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }



    public function actionAuthQr()
    {
        Yii::$app->response->format = Response::FORMAT_RAW;
        $code = HttpHelper::getParams('task_id', CommonHelper::guid());
        $type = HttpHelper::getParams('auth_type','user');
        $target = HttpHelper::getParams('target','/wechat/oauthcallback/');
        Yii::$app->redis->setex('wechatLogin:'.$type.':'.$code, ((int)Yii::getAlias('@wechatQrTimer'))/60,$code);
        $url = Yii::getAlias('@authRequestUrl'.'/'.'?auth_type='.$type.'&task_id='.$code);
        QRcode::png($url,false, 'Q',4, 2);
    }


    public function actionTestRedis()
    {
        //$r = Yii::$app->redis->setex('leo22',50,'asdf');
        $r = Yii::$app->redis->get('leo22');
        return $r;
    }


    public function actionAuthRequest()
    {
        $task_id = HttpHelper::getParams('task_id');
        $type = HttpHelper::getParams('auth_type','user');
        $backurl = HttpHelper::getParams('target_back','/');
        $r = Yii::$app->redis->get('wechatLogin:'.$type.':'.$task_id);
        if(isset($task_id) &&  isset($r))
        {
            $callBack = Yii::getAlias('@authCallbackUrl').'?';
            $parms = 'task_id='.$task_id;
            if($type != null )
                $parms .= '&auth_type='.$type;

            $callBack .= $parms;
            $config = [
                'app_id' => 'wxb8328f360729fe40',
                'secret' => '2a88c8d45c9d4457edec92d8a3f51d90',
                'token'  => 'leotest',
                'oauth' => [
                    'scopes'   => ['snsapi_base'],
                    'callback' => $callBack,
                ],
            ];
            $app = new Application($config);
            $oauth = $app->oauth;
            $oauth->redirect()->send();
            //return $this->redirect($callBack);
        }
        else
        {
            return $this->render('/site/error',[
                'message' => '二维码已过期，请刷新登陆页面后重新扫描登陆. <a href="/site/signin">点击重新登陆</a>',
                'name' => '二维码已过期',
            ]);
        }
    }


    public function actionAuthCallback()
    {
        $config = [
            'app_id' => 'wxb8328f360729fe40',
            'secret' => '2a88c8d45c9d4457edec92d8a3f51d90',
            'token'  => 'leotest',
        ];
        $app = new Application($config);
        $oauth = $app->oauth;
        $user = $oauth->user();
//        Yii::$app->response->format=Response::FORMAT_JSON;
//        return $user;

        $task_id = HttpHelper::getParams('task_id');
        $type = HttpHelper::getParams('auth_type','user');
        $target = HttpHelper::getParams('target_back','/');
        //Yii::$app->redis->set('wechatLogin:'.$type.':'.$code.':'.'openid','8888');
        return $this->pushMsg($task_id,$user->id);
        //return $this->redirect($target.'?task_id='.$task_id.'&auth_type='.$type.'&openid='.'8888' );
    }


    function pushMsg($task_id,$open_id)
    {
        // 建立连接，@see http://php.net/manual/zh/function.stream-socket-client.php
        $client = stream_socket_client('tcp://127.0.0.1:8806');
        if(!$client) return "can not connect";
        // 模拟超级用户，以文本协议发送数据，注意Text文本协议末尾有换行符（发送的数据中最好有能识别超级用户的字段），这样在Event.php中的onMessage方法中便能收到这个数据，然后做相应的处理即可
        fwrite($client, '{"type":"send","task_id":"'.$task_id.'","openid":"'.$open_id.'"}'."\n");
        return  '<script>alert("登陆成功，正在为您自动跳转...")</script>';
    }




    public function actionIndex()
    {

        $options = [
            'debug'  => false,
            'app_id' => 'wxb8328f360729fe40',
            'secret' => '2a88c8d45c9d4457edec92d8a3f51d90',
            'token'  => 'leotest',

            // 'aes_key' => null, // 可选

            'log' => [
                'level' => 'debug',
                'file'  => 'C:\projects\yii2blog\blog\frontend\runtime\logs\easywechat.log', // XXX: 绝对路径！！！！
            ],

            //...
        ];
        //Yii::$app->response->format=Response::FORMAT_JSON;
        $app = new Application($options);
        $server = $app->server;
        $server->setMessageHandler(function ($message) {
            if ($message->MsgType == 'event') {
                # code...
                switch ($message->Event) {
                    case 'subscribe':
                        # code...
                        break;
                    case 'unsubscribe':
                        # code...
                        break;
                    case 'CLICK':
                        # code...
                        break;
                    default:
                        # code...
                        break;
                }
            }
            else
            {
                switch ($message->MsgType) {
                    case 'event':
                        # 事件消息...
                        break;
                    case 'text':
                        return '自动回复消息 啦啦啦';
                        # 文字消息...
                        break;
                    case 'image':
                        break;
                    case 'voice':
                        # 语音消息...
                        break;
                    case 'video':
                        # 视频消息...
                        break;
                    case 'location':
                        # 坐标消息...
                        break;
                    case 'link':
                        # 链接消息...
                        break;
                    // ... 其它消息
                    default:
                        return 'welcome!';
                        break;
                }
            }


            // ...
        });
        $server->serve()->send();
    }




}
