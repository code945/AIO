-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Jun 27, 2016 at 10:18 AM
-- Server version: 10.1.13-MariaDB
-- PHP Version: 5.6.20

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `blog`
--

--
-- Dumping data for table `post`
--

INSERT INTO `post` (`id`, `title`, `lead_photo`, `lead_text`, `content`, `created_at`, `updated_at`, `category_id`, `view_count`, `on_top`, `comments_count`, `status`, `sort`) VALUES
(203, 'Yii2博客实战教程——使用migration管理数据库更改', NULL, NULL, '<p>Yii自带了一个非常方便的命令行工具，可以帮助我们自动创建数据库维护脚本。使用迁移脚本，我们可以使用svn，git等版本控制工具对数据库的更改进行版本控制，方便团队之间数据库更改的同步，以及开发环境、测试环境、生产环境之间的数据库同步，回退等。这里要插句嘴，就是migration脚本的功能虽然非常实用，但是并非必须步骤，如果你熟悉数据库开发，完全可以直接跳过这步，直接使用sql进行数据库的更新维护，只要保存好sql脚本，使用版本控制做维护其实道理也是一样的。或者你可以直接操作数据库，Yii框架并不依赖migrate脚本才能工作，只要有数据库，链接正常就好。\r\n</p><p>首先在数据库中创建数据库，</p><pre>create database blog;</pre><p>修改common\\config\\main-local.php中的数据库配置</p><pre>''components'' =&gt; [\r\n        ''db'' =&gt; [\r\n            ''class'' =&gt; ''yii\\db\\Connection'',\r\n            ''dsn'' =&gt; ''mysql:host=localhost;dbname=blog'',\r\n            ''username'' =&gt; ''root'',\r\n            ''password'' =&gt; '''',\r\n            ''charset'' =&gt; ''utf8'',\r\n        ],\r\n        ...<br></pre><p>准备工作都做好后，我们就讲讲如何使用migrate命令行工具。我们使用命令行工具cd到yii的项目目录，在windows下就是有yii.bat的根目录，执行命令yii migrate/create &lt;迁移名&gt;</p><pre>c:\\projects\\learnyii\\blog&gt;yii migrate/create create_admin_table\r\nYii Migration Tool (based on Yii v2.0.8)\r\nCreate new migration ''C:\\projects\\learnyii\\blog\\console/migrations\\m160627_032238_create_admin_table.php''? (yes|no) [no]:yes\r\nNew migration created successfully.\r\nc:\\projects\\learnyii\\blog&gt;yii migrate/create create_admin_table\r\n</pre><p>执行完以上代码后我们就可以在console\\migrations目录下看到yii为我们自动生成的迁移文件名称按照 m&lt;YYMMDD_HHMMSS&gt;_&lt;Name&gt; 的格式自动生成<span class="redactor-invisible-space"></span>\r\n</p><p>打开文件我们可以看到一个Yii为我们自动生成好的类，其中up方法是升级或创建时执行的方法，down是降级回滚时执行的方法。除了up和down，我们还可以把代码都放到 safeUp() 和 safeDown() 方法里面。它们与 up() 和 down() 的不同点就在于它们是被隐式的封装到事务当中的。如此一来，只要这些方法里面的任何一个操作失败了，那么所有之前的操作都会被自动的回滚。\r\n</p><pre>class m160627_032238_create_admin_table extends Migration\r\n{      \r\n   public function safeUp()\r\n    {\r\n        $this-&gt;createTable(''admin'', [\r\n            ''id'' =&gt; $this-&gt;primaryKey(),\r\n            ''username'' =&gt; $this-&gt;string()-&gt;notNull()-&gt;unique(),\r\n            ''auth_key'' =&gt; $this-&gt;string(32)-&gt;notNull(),\r\n            ''password_hash'' =&gt; $this-&gt;string()-&gt;notNull(),\r\n            ''password_reset_token'' =&gt; $this-&gt;string()-&gt;unique(),\r\n            ''email'' =&gt; $this-&gt;string()-&gt;unique(),\r\n            ''wechat_id'' =&gt; $this-&gt;string(100),\r\n            ''status'' =&gt; $this-&gt;smallInteger()-&gt;defaultValue(10),\r\n            ''created_at'' =&gt; $this-&gt;integer(),\r\n            ''updated_at'' =&gt; $this-&gt;integer(),\r\n        ]);\r\n      //创建默认的管理员账号用户名admin密码123456\r\n        $this-&gt;insert(''admin'',\r\n            [\r\n                ''username''=&gt;''admin'',\r\n                ''password_hash''=&gt;''$2y$13$yeCwq5lfMzse3rYGrX2cZOKXTmJ8.945Npt9TO2.nQ8h8xKUUkVua'',\r\n                ''email''=&gt;''lhx880619@163.com'',\r\n                ''wechat_id''=&gt;''8888'',\r\n                ''status''=&gt;10\r\n            ]);\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public function safeDown()\r\n    {\r\n        $this-&gt;dropTable(''admin'');\r\n    } \r\n}\r\n</pre><p>通过以上步骤我们就为管理员表创建了一个迁移脚本，脚本创建了管理员表，同时创建了一个默认的管理员账号。\r\n</p><p>同理我们创建文章分类表（category）、文章表（post）、标签表（tag）、文章标签关系表（post_tag）\r\n</p><pre>&lt;span class="redactor-invisible-space"&gt;class m160517_025408_create_category_table extends Migration\r\n{\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public function safeUp()\r\n    {\r\n        $this-&gt;createTable(''category'', [\r\n            ''id'' =&gt; $this-&gt;primaryKey(),\r\n            ''pid''=&gt; $this-&gt;integer(),\r\n            ''name'' =&gt; $this-&gt;string(200)-&gt;notNull(),\r\n            ''created_at'' =&gt; $this-&gt;datetime(),\r\n            ''updated_at'' =&gt; $this-&gt;datetime(),\r\n            ''sort''=&gt; $this-&gt;integer()-&gt;defaultValue(0),\r\n        ]);\r\n        $this-&gt;addForeignKey(''fk_category_pid'', ''category'', ''pid'', ''category'', ''id'', ''CASCADE'');\r\n        $this-&gt;insert(''category'',[''name''=&gt;''PHP'',''sort''=&gt;1]);\r\n        $this-&gt;insert(''category'',[''name''=&gt;''.NET'',''sort''=&gt;2]);\r\n        $this-&gt;insert(''category'',[''name''=&gt;''DataBase'',''sort''=&gt;3]);\r\n        $this-&gt;insert(''category'',[''name''=&gt;''前端'',''sort''=&gt;4]);\r\n        $this-&gt;insert(''category'',[''name''=&gt;''生活随笔'',''sort''=&gt;5]);\r\n    }\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    public function safeDown()\r\n    {\r\n        $this-&gt;dropForeignKey(''fk_category_pid'',''category'');\r\n        $this-&gt;dropTable(''category'');\r\n    }\r\n}&lt;span class="redactor-invisible-space"&gt;&lt;span class="redactor-invisible-space"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;\r\n\r\n</pre><p>文章表（post）</p><pre>&lt;?php\r\n\r\nuse yii\\db\\Migration;\r\n\r\n/**\r\n * Handles the creation for table `post_table`.\r\n */\r\nclass m160517_083707_create_post_table extends Migration\r\n{\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function up()\r\n {\r\n$this-&gt;createTable(''post'', [\r\n''id'' =&gt; $this-&gt;primaryKey(),\r\n''title'' =&gt; $this-&gt;string(128)-&gt;notNull(), \r\n''lead_photo'' =&gt; $this-&gt;string(500),\r\n''lead_text'' =&gt; $this-&gt;text(),\r\n''content'' =&gt; $this-&gt;text()-&gt;notNull(),\r\n''created_at'' =&gt; $this-&gt;datetime(),\r\n''updated_at'' =&gt; $this-&gt;datetime(),\r\n''category_id'' =&gt; $this-&gt;integer()-&gt;notNull(),\r\n''view_count''=&gt; $this-&gt;integer()-&gt;defaultValue(1),\r\n''on_top''=&gt; $this-&gt;integer()-&gt;defaultValue(0),\r\n''comments_count''=&gt; $this-&gt;integer()-&gt;defaultValue(0),\r\n''status''=&gt; $this-&gt;integer()-&gt;defaultValue(0),\r\n''sort''=&gt; $this-&gt;integer()-&gt;defaultValue(0),\r\n]);\r\n\r\n$this-&gt;addForeignKey(''fk_post_category'', ''post'', ''category_id'', ''category'', ''id'', ''CASCADE'');\r\n}\r\n\r\npublic function down()\r\n {\r\n$this-&gt;dropForeignKey(''fk_post_category'', ''post'');\r\n$this-&gt;dropTable(''post'');\r\n}\r\n}\r\n\r\n</pre><p>标签表（tag）<br>\r\n</p><pre>&lt;?php\r\n\r\nuse yii\\db\\Migration;\r\n\r\n/**\r\n * Handles the creation for table `tag`.\r\n */\r\nclass m160524_084946_create_tag_table extends Migration\r\n{\r\n/**\r\n * @inheritdoc\r\n*/\r\n\r\npublic function safeUp()\r\n {\r\n$this-&gt;createTable(''tag'', [\r\n''id'' =&gt; $this-&gt;primaryKey(),\r\n''name'' =&gt; $this-&gt;string(200)-&gt;notNull(),\r\n''created_at'' =&gt; $this-&gt;datetime(),\r\n''updated_at'' =&gt; $this-&gt;datetime(),\r\n''sort''=&gt; $this-&gt;integer()-&gt;defaultValue(0),\r\n]);\r\n\r\n$this-&gt;insert(''tag'',[''name''=&gt;''YII2'',''sort''=&gt;1]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''MySql'',''sort''=&gt;2]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''Linux'',''sort''=&gt;3]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''Nginx'',''sort''=&gt;4]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''运维'',''sort''=&gt;5]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''测试'',''sort''=&gt;6]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''API'',''sort''=&gt;7]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''REST'',''sort''=&gt;8]);\r\n$this-&gt;insert(''tag'',[''name''=&gt;''消息队列'',''sort''=&gt;9]);\r\n\r\n}\r\n\r\n\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function safeDown()\r\n {\r\n$this-&gt;dropTable(''tag'');\r\n}\r\n}\r\n\r\n</pre><p>文章标签关系表（post_tag）<br>\r\n</p><pre>&lt;?php\r\n\r\nuse yii\\db\\Migration;\r\n\r\n/**\r\n * Handles the creation for table `post_tag_table`.\r\n */\r\nclass m160524_085001_create_post_tag_table extends Migration\r\n{\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function safeUp()\r\n {\r\n$this-&gt;createTable(''post_tag'', [\r\n''id'' =&gt; $this-&gt;primaryKey(),\r\n''post_id'' =&gt; $this-&gt;integer()-&gt;notNull(),\r\n''tag_id'' =&gt; $this-&gt;integer()-&gt;notNull()\r\n ]);\r\n\r\n$this-&gt;createIndex(''post_tag_index'', ''post_tag'', [''post_id'', ''tag_id'']);\r\n$this-&gt;addForeignKey(''fk_post_tag_post'', ''post_tag'', ''post_id'', ''post'', ''id'', ''CASCADE'', ''CASCADE'');\r\n$this-&gt;addForeignKey(''fk_post_tag_tag'', ''post_tag'', ''tag_id'', ''tag'', ''id'', ''CASCADE'', ''CASCADE'');\r\n}\r\n\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function safeDown()\r\n {\r\n$this-&gt;dropForeignKey(''fk_post_tag_post'', ''post_tag'');\r\n$this-&gt;dropForeignKey(''fk_post_tag_tag'', ''post_tag'');\r\n$this-&gt;dropTable(''post_tag'');\r\n}\r\n}\r\n\r\n</pre><p>脚本全部创建完成了之后，我们可以执行命令提交脚本\r\n</p><pre>yii migrate\r\n</pre><p>提交之后还可以回退迁移\r\n</p><pre>yii migrate/down # revert the most recently applied migration 还原最近一次提交的迁移\r\n</pre><p><a href="http://www.yiiframework.com/doc-2.0/guide-db-migrations.html" target="_blank">migration官方参考文档</a><br>\r\n</p>', '2016-06-27 11:58:48', '2016-06-27 15:54:29', 1, 1, 0, 0, 0, 0),
(204, 'Yii2博客实战教程——后台模板AdminLTE的整合', NULL, NULL, '<p>AdminLTE是一个基于bootstrap开发的后台模板，具有很多炫酷吊炸天的控件和效果，非常适合作为网站后台管理的模板。github的项目地址是<a href="https://github.com/almasaeed2010/AdminLTE">https://github.com/almasaeed2010/AdminLTE</a> 赚了1w多的star可见这个项目有多火。我们这里要采用的是经过包装的Yii扩展，github地址<a href="https://github.com/dmstr/yii2-adminlte-asset">https://github.com/dmstr/yii2-adminlte-asset</a><span class="redactor-invisible-space">，安装我们采用composer安装，如果还没学会的话，赶紧再去学习下吧，后面我们所有的扩展都会采用composer安装。</span></p><p><span class="redactor-invisible-space">cd到项目根目录输入以下命令安装：</span></p><pre>composer require dmstr/yii2-adminlte-asset "2.*"<br></pre><p><span class="redactor-invisible-space"><span class="redactor-invisible-space">安装完成之后，我们就可以使用了。由于菜单配置项在vendor目录下，我们不能随便修改，所以我吗可以直接copy示例的代码使用。</span></span>copy整个vendor/dmstr/yii2-adminlte-asset/example-views/yiisoft/yii2-app下的layouts和site到backend/views，覆盖原始文件。</p><p><br></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"></span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br></span></span></span></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space"><br></span></span></p>', '2016-06-27 13:59:46', '2016-06-27 13:59:46', 1, 1, 0, 0, 0, 0),
(205, 'Yii2博客实战教程——实现前后台用户完全分离', NULL, NULL, '<p>Yii自带开箱即用的用户模型，包括整个用户的登陆注册等。可以这个默认的用户模型有个缺点，就是不区分前台用户和后台用户，而往往我们希望我们对后天管理员采用不同的数据表进行单独的管理。如何实现这个功能呢，我们现在就来讲讲如何实现前后台用户的完全分离。\r\n</p><p>1.创建后台管理员AR模型Admin（backend\\models\\Admin） 实现IdentityInterface接口。也可以直接修改common\\models\\User然后修改。\r\n</p><pre>&lt;?php\r\nnamespace backend\\models;\r\nuse Yii;\r\nuse yii\\base\\NotSupportedException;\r\nuse yii\\behaviors\\TimestampBehavior;\r\nuse yii\\db\\ActiveRecord;\r\nuse yii\\helpers\\ArrayHelper;\r\nuse yii\\web\\IdentityInterface;\r\n/**\r\n * User model\r\n *\r\n * @property integer $id\r\n * @property string $username\r\n * @property string $password_hash\r\n * @property string $password_reset_token\r\n * @property string $email\r\n * @property string $auth_key\r\n * @property integer $status\r\n * @property integer $created_at\r\n * @property integer $updated_at\r\n * @property string $password write-only password\r\n */\r\nclass Admin extends ActiveRecord implements IdentityInterface\r\n{\r\nconst STATUS_DELETED = 0;\r\nconst STATUS_ACTIVE = 10;\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic static function tableName()\r\n {\r\nreturn ''{{%admin}}'';\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function behaviors()\r\n {\r\nreturn [\r\n TimestampBehavior::className(),\r\n];\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function rules()\r\n {\r\nreturn [\r\n [''status'', ''default'', ''value'' =&gt; self::STATUS_ACTIVE],\r\n[''status'', ''in'', ''range'' =&gt; [self::STATUS_ACTIVE, self::STATUS_DELETED]],\r\n];\r\n}\r\npublic static function getStatusTitle($status=false){\r\n$status_array= [\r\n''''=&gt;''请选择'',\r\nself::STATUS_DELETED=&gt;''禁止'',\r\nself::STATUS_ACTIVE=&gt;''正常''\r\n];\r\nreturn $status==false?$status_array:ArrayHelper::getValue($status_array,$status,''未知'');\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic static function findIdentity($id)\r\n {\r\nreturn static::findOne([''id'' =&gt; $id, ''status'' =&gt; self::STATUS_ACTIVE]);\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic static function findIdentityByAccessToken($token, $type = null)\r\n {\r\nthrow new NotSupportedException(''"findIdentityByAccessToken" is not implemented.'');\r\n}\r\n/**\r\n * Finds user by username\r\n *\r\n * @param string $username\r\n * @return static|null\r\n */\r\npublic static function findByUsername($username)\r\n {\r\nreturn static::findOne([''username'' =&gt; $username, ''status'' =&gt; self::STATUS_ACTIVE]);\r\n}\r\n/**\r\n * Finds user by password reset token\r\n *\r\n * @param string $token password reset token\r\n * @return static|null\r\n */\r\npublic static function findByPasswordResetToken($token)\r\n {\r\nif (!static::isPasswordResetTokenValid($token)) {\r\nreturn null;\r\n}\r\nreturn static::findOne([\r\n''password_reset_token'' =&gt; $token,\r\n''status'' =&gt; self::STATUS_ACTIVE,\r\n]);\r\n}\r\n/**\r\n * Finds out if password reset token is valid\r\n *\r\n * @param string $token password reset token\r\n * @return boolean\r\n */\r\npublic static function isPasswordResetTokenValid($token)\r\n {\r\nif (empty($token)) {\r\nreturn false;\r\n}\r\n$timestamp = (int) substr($token, strrpos($token, ''_'') + 1);\r\n$expire = Yii::$app-&gt;params[''user.passwordResetTokenExpire''];\r\nreturn $timestamp + $expire &gt;= time();\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function getId()\r\n {\r\nreturn $this-&gt;getPrimaryKey();\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function getAuthKey()\r\n {\r\nreturn $this-&gt;auth_key;\r\n}\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function validateAuthKey($authKey)\r\n {\r\nreturn $this-&gt;getAuthKey() === $authKey;\r\n}\r\n/**\r\n * Validates password\r\n *\r\n * @param string $password password to validate\r\n * @return boolean if password provided is valid for current user\r\n */\r\npublic function validatePassword($password)\r\n {\r\nreturn Yii::$app-&gt;security-&gt;validatePassword($password, $this-&gt;password_hash);\r\n}\r\n/**\r\n * Generates password hash from password and sets it to the model\r\n *\r\n * @param string $password\r\n */\r\npublic function setPassword($password)\r\n {\r\n$this-&gt;password_hash = Yii::$app-&gt;security-&gt;generatePasswordHash($password);\r\n}\r\n/**\r\n * Generates "remember me" authentication key\r\n */\r\npublic function generateAuthKey()\r\n {\r\n$this-&gt;auth_key = Yii::$app-&gt;security-&gt;generateRandomString();\r\n}\r\n/**\r\n * Generates new password reset token\r\n */\r\npublic function generatePasswordResetToken()\r\n {\r\n$this-&gt;password_reset_token = Yii::$app-&gt;security-&gt;generateRandomString() . ''_'' . time();\r\n}\r\n/**\r\n * Removes password reset token\r\n */\r\npublic function removePasswordResetToken()\r\n {\r\n$this-&gt;password_reset_token = null;\r\n}\r\n}\r\n</pre><p>2.添加backend\\models\\LoginForm.php 其实也可以直接copy common中的loginform做少许修改\r\n</p><pre>&lt;?php\r\nnamespace backend\\models;\r\n\r\nuse Yii;\r\nuse yii\\base\\Model;\r\n\r\n/**\r\n * Login form\r\n */\r\nclass LoginForm extends Model\r\n{\r\npublic $username;\r\npublic $password;\r\npublic $rememberMe = true;\r\npublic $verifyCode;\r\nprivate $_user;\r\n\r\n\r\n/**\r\n * @inheritdoc\r\n*/\r\npublic function rules()\r\n {\r\nreturn [\r\n// username and password are both required\r\n[[''username'', ''password''], ''required'',''message'' =&gt; ''请输入信息''],\r\n// rememberMe must be a boolean value\r\n[''rememberMe'', ''boolean''],\r\n// password is validated by validatePassword()\r\n[''password'', ''validatePassword''], \r\n[''verifyCode'', ''captcha'',''message'' =&gt; ''验证码不正确''],\r\n];\r\n}\r\n\r\npublic function attributeLabels()\r\n {\r\nreturn [\r\n''username'' =&gt; ''用户名'',\r\n''password'' =&gt; ''密码'',\r\n''email'' =&gt; ''邮箱'',\r\n''rememberMe'' =&gt; ''记住密码'',\r\n''verifyCode'' =&gt;''验证码'',\r\n];\r\n}\r\n\r\n\r\n\r\n/**\r\n * Validates the password.\r\n * This method serves as the inline validation for password.\r\n *\r\n * @param string $attribute the attribute currently being validated\r\n * @param array $params the additional name-value pairs given in the rule\r\n */\r\npublic function validatePassword($attribute, $params)\r\n {\r\nif (!$this-&gt;hasErrors()) {\r\n$user = $this-&gt;getUser();\r\nif (!$user || !$user-&gt;validatePassword($this-&gt;password)) {\r\n$this-&gt;addError($attribute, ''用户名或密码错误.'');\r\n}\r\n }\r\n }\r\n\r\n/**\r\n * Logs in a user using the provided username and password.\r\n *\r\n * @return boolean whether the user is logged in successfully\r\n */\r\npublic function login()\r\n {\r\nif ($this-&gt;validate()) {\r\nreturn Yii::$app-&gt;user-&gt;login($this-&gt;getUser(), $this-&gt;rememberMe ? 3600 * 24 * 30 : 0);\r\n} else {\r\nreturn false;\r\n}\r\n }\r\n\r\n/**\r\n * Finds user by [[username]]\r\n *\r\n * @return User|null\r\n */\r\nprotected function getUser()\r\n {\r\nif ($this-&gt;_user === null) {\r\n$this-&gt;_user = Admin::findByUsername($this-&gt;username);\r\n}\r\n\r\nreturn $this-&gt;_user;\r\n}\r\n}\r\n\r\n</pre><p>3.为登陆增加验证码功能</p><p>backend\\views\\siteController.php中增加captcha验证码，</p><pre>    public function actions()\r\n    {\r\n        return [\r\n            ''error'' =&gt; [\r\n                ''class'' =&gt; ''yii\\web\\ErrorAction'',\r\n            ],\r\n            ''captcha'' =&gt; [\r\n                ''class'' =&gt; ''yii\\captcha\\CaptchaAction'',\r\n                ''maxLength''=&gt;4,\r\n                ''minLength''=&gt;4,\r\n            ],\r\n        ];\r\n    }\r\n\r\n<span class="redactor-invisible-space">    public function behaviors()\r\n    {\r\n        return [\r\n            ''access'' =&gt; [\r\n                ''class'' =&gt; AccessControl::className(),\r\n                ''rules'' =&gt; [\r\n                    [\r\n                        ''actions'' =&gt; [''login'', ''error'', ''captcha'',],\r\n                        ''allow'' =&gt; true,\r\n                    ],\r\n                    [\r\n                        ''actions'' =&gt; [''logout'', ''index''],\r\n                        ''allow'' =&gt; true,\r\n                        ''roles'' =&gt; [''@''],\r\n                    ],\r\n                ],\r\n            ],\r\n            ''verbs'' =&gt; [\r\n                ''class'' =&gt; VerbFilter::className(),\r\n                ''actions'' =&gt; [\r\n                    ''logout'' =&gt; [''post''],\r\n                ],\r\n            ],\r\n        ];\r\n    }</span>\r\n</pre><p>同时修改backend\\views\\siteController.php<span class="redactor-invisible-space">中LoginForm的引用</span></p><pre>use common\\models\\LoginForm;\r\n&lt;span class="redactor-invisible-space"&gt;修改为\r\n&lt;/span&gt;use backend\\models\\LoginForm;</pre><p>在backend\\views\\site\\login.php 在ActiveForm中加入验证码字段<span class="redactor-invisible-space"><br></span></p><pre>&lt;?php\r\nuse yii\\helpers\\Html;\r\nuse yii\\bootstrap\\ActiveForm;\r\n\r\n/* @var $this yii\\web\\View */\r\n/* @var $form yii\\bootstrap\\ActiveForm */\r\n/* @var $model \\common\\models\\LoginForm */\r\n\r\n$this-&gt;title = ''Sign In'';\r\n\r\n$fieldOptions1 = [\r\n''options'' =&gt; [''class'' =&gt; ''form-group has-feedback''],\r\n''inputTemplate'' =&gt; "{input}&lt;span class=''glyphicon glyphicon-envelope form-control-feedback''&gt;&lt;/span&gt;"\r\n];\r\n\r\n$fieldOptions2 = [\r\n''options'' =&gt; [''class'' =&gt; ''form-group has-feedback''],\r\n''inputTemplate'' =&gt; "{input}&lt;span class=''glyphicon glyphicon-lock form-control-feedback''&gt;&lt;/span&gt;"\r\n];\r\n?&gt;\r\n\r\n&lt;div class="login-box"&gt;\r\n &lt;div class="login-logo"&gt;\r\n &lt;a href="#"&gt;&lt;b&gt;Admin&lt;/b&gt;LTE&lt;/a&gt;\r\n &lt;/div&gt;\r\n&lt;!-- /.login-logo --&gt;\r\n&lt;div class="login-box-body"&gt;\r\n &lt;p class="login-box-msg"&gt;Sign in to start your session&lt;/p&gt;\r\n\r\n&lt;?php $form = ActiveForm::begin([''id'' =&gt; ''login-form'', ''enableClientValidation'' =&gt; false]); ?&gt;\r\n\r\n&lt;?= $form\r\n-&gt;field($model, ''username'', $fieldOptions1)\r\n -&gt;label(false)\r\n -&gt;textInput([''placeholder'' =&gt; $model-&gt;getAttributeLabel(''username'')]) ?&gt;\r\n\r\n&lt;?= $form\r\n-&gt;field($model, ''password'', $fieldOptions2)\r\n -&gt;label(false)\r\n -&gt;passwordInput([''placeholder'' =&gt; $model-&gt;getAttributeLabel(''password'')]) ?&gt;\r\n\r\n&lt;?= $form\r\n-&gt;field($model, ''verifyCode'')\r\n -&gt;label(false)\r\n -&gt;widget(Captcha::className(), [\r\n''template'' =&gt; ''&lt;div class="input-group"&gt; \r\n {input}\r\n &lt;span class="input-group-addon" style="padding-left:10px; padding-right:10px;"&gt;{image}&lt;/span&gt;\r\n &lt;/div&gt;'',\r\n''options'' =&gt; [''class'' =&gt; ''form-control'', ''maxlength''=&gt;"4", ''placeholder''=&gt;"验证码" ],\r\n''imageOptions'' =&gt;[''style''=&gt;''height:20px'', ''border''=&gt;''0'', ''alt''=&gt;"点击更换验证码" ]\r\n ]) ?&gt;\r\n\r\n\r\n\r\n&lt;div class="row"&gt;\r\n &lt;div class="col-xs-8"&gt;\r\n&lt;?= $form-&gt;field($model, ''rememberMe'')\r\n -&gt;checkbox()\r\n -&gt;label($model-&gt;getAttributeLabel(''rememberMe'')) ?&gt;\r\n&lt;/div&gt;\r\n&lt;!-- /.col --&gt;\r\n&lt;div class="col-xs-4"&gt;\r\n&lt;?= Html::submitButton(''登陆'', [''class'' =&gt; ''btn btn-primary btn-block btn-flat'', ''name'' =&gt; ''login-button'']) ?&gt;\r\n&lt;/div&gt;\r\n&lt;!-- /.col --&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;?php ActiveForm::end(); ?&gt; \r\n\r\n&lt;/div&gt;\r\n&lt;!-- /.login-box-body --&gt;\r\n&lt;/div&gt;&lt;!-- /.login-box --&gt;\r\n\r\n</pre><p>4.修改backend\\config\\main中的components下的user 节点\r\n</p><pre>''components'' =&gt; [\r\n\r\n''user'' =&gt; [\r\n''identityClass'' =&gt; ''backend\\models\\Admin'',\r\n''enableAutoLogin'' =&gt; true,\r\n''identityCookie'' =&gt; [\r\n''name'' =&gt; ''_backendUser'', // cookie name for backend user\r\n]\r\n ],\r\n...\r\n</pre><p>这样就做到l前后台用户的完全分离，包括cookie记住用户，用户的登陆、登出互不影响。\r\n</p><p><br>\r\n</p><p><br>\r\n</p><p><br>\r\n</p><p><br>\r\n</p><p><br>\r\n</p><p><br>\r\n</p>', '2016-06-27 15:06:39', '2016-06-27 15:47:33', 1, 1, 0, 0, 0, 0),
(206, 'Yii2博客实战教程——用gii快速创建CURD页面', NULL, NULL, '<p>Gii是Yii为我们提供的代码生成神器，可以根据代码模板自动生成简单代码，对于简单系统的后台管理十分方便，绝对是个生产力工具。</p><p>系统默认的gii页面可以通过url /index.php?r=gii 访问 如果默认模板不合心意，肿么办？没关系，我们可以自定义生成器。</p><p>默认的gii模板位置是在：vendor/yiisoft/yii2-gii/generators/，如果想自定义generator<span class="redactor-invisible-space">，最简单粗暴的方式就是copy路径下的文件到backend/views/gii/</span></p><p>例如配置curd模板，就需要复制vendor/yiisoft/yii2-gii/generators/<span class="redactor-invisible-space">crud的default目录下的所有文件到backend/views/gii/<span class="redactor-invisible-space">curd目录</span></span><br></p><p><span class="redactor-invisible-space"><span class="redactor-invisible-space">然后配置backend\\config\\main-local.php文件</span></span></p><pre>$config[''bootstrap''][] = ''gii'';\r\n    $config[''modules''][''gii''] = [\r\n        ''class'' =&gt; ''yii\\gii\\Module'',\r\n        ''generators'' =&gt; [ //here\r\n            ''crud'' =&gt; [ // generator name\r\n                ''class'' =&gt; ''yii\\gii\\generators\\crud\\Generator'', // generator class\r\n                ''templates'' =&gt; [ //setting for out templates\r\n                    ''backendgii'' =&gt; ''@backend/views/gii/crud/default'', // template name =&gt; path to template\r\n                ]\r\n            ]\r\n        ],\r\n    ];<br></pre><p>反问后台的gii页面，打开curd，就可以在下拉模板列表中选择backendgii选项了</p><p><br></p>', '2016-06-27 18:15:27', '2016-06-27 18:15:27', 1, 1, 0, 0, 0, 0);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
